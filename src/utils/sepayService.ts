import { OrderService } from './orderService';

// Sepay API Configuration
// C·∫ßn c·∫•u h√¨nh trong file .env:
// VITE_SEPAY_API_KEY=your_sepay_api_key
// VITE_SEPAY_WEBHOOK_URL=your_webhook_endpoint

interface SepayWebhookData {
  id: number;                    // ID giao d·ªãch tr√™n SePay
  gateway: string;               // T√™n ng√¢n h√†ng (VCB, TPBank, etc.)
  transactionDate: string;       // Th·ªùi gian giao d·ªãch
  accountNumber: string;         // S·ªë t√†i kho·∫£n ng√¢n h√†ng
  code: string | null;          // M√£ code thanh to√°n (SePay t·ª± nh·∫≠n di·ªán)
  content: string;              // N·ªôi dung chuy·ªÉn kho·∫£n
  transferType: 'in' | 'out';   // Lo·∫°i giao d·ªãch: "in" l√† ti·ªÅn v√†o, "out" l√† ti·ªÅn ra
  transferAmount: number;        // S·ªë ti·ªÅn giao d·ªãch
  accumulated: number;           // S·ªë d∆∞ t√†i kho·∫£n (l≈©y k·∫ø)
  subAccount: string | null;     // T√†i kho·∫£n ph·ª•
  referenceCode: string;         // M√£ tham chi·∫øu giao d·ªãch
  description: string;           // To√†n b·ªô n·ªôi dung chuy·ªÉn kho·∫£n
}

interface SepayQRConfig {
  accountNumber: string;         // S·ªë t√†i kho·∫£n ng√¢n h√†ng
  bankCode: string;             // M√£ ng√¢n h√†ng (VCB, TPBank, etc.)
  amount: number;               // S·ªë ti·ªÅn
  content: string;              // N·ªôi dung chuy·ªÉn kho·∫£n
  accountName?: string;         // T√™n ch·ªß t√†i kho·∫£n
}

export class SepayService {
  // C·∫•u h√¨nh ng√¢n h√†ng t·ª´ environment variables
  private static readonly BANK_CONFIG = {
    bankCode: import.meta.env.VITE_SEPAY_BANK_CODE || 'MB',
    bankName: 'MB Bank',
    accountNumber: import.meta.env.VITE_SEPAY_ACCOUNT_NUMBER || '9090190899999',
    accountName: import.meta.env.VITE_SEPAY_ACCOUNT_NAME || 'V≈© Th√πy Giang',
    branch: 'Chi nh√°nh TP.HCM'
  };

  /**
   * T·∫°o QR Code URL s·ª≠ d·ª•ng Sepay QR service
   * T√†i li·ªáu: https://qr.sepay.vn
   */
  static generateQRCodeURL(config: SepayQRConfig): string {
    const params = new URLSearchParams({
      acc: config.accountNumber,
      bank: config.bankCode,
      amount: config.amount.toString(),
      des: config.content
    });

    if (config.accountName) {
      params.append('template', 'compact');
    }

    return `https://qr.sepay.vn/img?${params.toString()}`;
  }

  /**
   * T·∫°o QR Code cho ƒë∆°n h√†ng
   */
  static createOrderQRCode(orderId: string, amount: number): {
    qrUrl: string;
    paymentCode: string;
    bankInfo: typeof SepayService.BANK_CONFIG;
  } {
    // T·∫°o m√£ n·ªôi dung thanh to√°n
    const timestamp = Date.now().toString().slice(-6);
    const orderCode = orderId.slice(-4).toUpperCase();
    const paymentCode = `RAN${orderCode}${timestamp}`;

    const qrUrl = this.generateQRCodeURL({
      accountNumber: this.BANK_CONFIG.accountNumber,
      bankCode: this.BANK_CONFIG.bankCode,
      amount: amount,
      content: paymentCode,
      accountName: this.BANK_CONFIG.accountName
    });

    return {
      qrUrl,
      paymentCode,
      bankInfo: this.BANK_CONFIG
    };
  }

  /**
   * X·ª≠ l√Ω webhook t·ª´ Sepay khi c√≥ giao d·ªãch chuy·ªÉn kho·∫£n
   * Endpoint n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi t·ª´ server webhook
   */
  static async handleSepayWebhook(webhookData: SepayWebhookData): Promise<{
    success: boolean;
    message: string;
    orderId?: string;
  }> {
    try {
      console.log('üîî Received Sepay webhook:', webhookData);

      // Ch·ªâ x·ª≠ l√Ω giao d·ªãch ti·ªÅn v√†o
      if (webhookData.transferType !== 'in') {
        return {
          success: true,
          message: 'Ignored outgoing transaction'
        };
      }

      // Tr√≠ch xu·∫•t m√£ ƒë∆°n h√†ng t·ª´ n·ªôi dung chuy·ªÉn kho·∫£n
      const orderId = this.extractOrderIdFromContent(webhookData.content);
      if (!orderId) {
        return {
          success: false,
          message: 'Could not extract order ID from transaction content'
        };
      }

      // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
      const order = await OrderService.getOrderById(orderId);
      if (!order) {
        return {
          success: false,
          message: `Order ${orderId} not found`
        };
      }

      // Ki·ªÉm tra s·ªë ti·ªÅn c√≥ kh·ªõp kh√¥ng
      if (webhookData.transferAmount !== order.total_amount) {
        console.warn(`‚ö†Ô∏è Amount mismatch: Expected ${order.total_amount}, got ${webhookData.transferAmount}`);
        // C√≥ th·ªÉ g·ª≠i th√¥ng b√°o cho admin ƒë·ªÉ ki·ªÉm tra th·ªß c√¥ng
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
      const updateResult = await OrderService.updateOrderStatus(orderId, 'paid', {
        payment_method: 'BANK_TRANSFER',
        payment_amount: webhookData.transferAmount,
        payment_reference: webhookData.referenceCode,
        payment_gateway: webhookData.gateway,
        sepay_transaction_id: webhookData.id.toString()
      });

      if (updateResult.success) {
        console.log(`‚úÖ Order ${orderId} marked as paid via Sepay webhook`);
        
        // G·ª≠i th√¥ng b√°o ƒë·∫øn Telegram (optional)
        // await this.notifyPaymentConfirmed(orderId, webhookData);
        
        return {
          success: true,
          message: `Order ${orderId} payment confirmed`,
          orderId
        };
      } else {
        return {
          success: false,
          message: `Failed to update order ${orderId}: ${updateResult.message}`
        };
      }

    } catch (error) {
      console.error('‚ùå Error processing Sepay webhook:', error);
      return {
        success: false,
        message: 'Internal server error'
      };
    }
  }

  /**
   * Tr√≠ch xu·∫•t Order ID t·ª´ n·ªôi dung chuy·ªÉn kho·∫£n
   * V√≠ d·ª•: "RAN1A2B123456" -> t√¨m ƒë∆°n h√†ng c√≥ ID ch·ª©a "1A2B"
   */
  private static extractOrderIdFromContent(content: string): string | null {
    try {
      // T√¨m pattern RAN + 4 k√Ω t·ª± + 6 s·ªë
      const match = content.match(/RAN([A-Z0-9]{4})(\d{6})/);
      if (match) {
        const orderCode = match[1];
        // T√¨m ƒë∆°n h√†ng c√≥ ID k·∫øt th√∫c b·∫±ng orderCode n√†y
        // Trong th·ª±c t·∫ø, b·∫°n c√≥ th·ªÉ c·∫ßn query database ƒë·ªÉ t√¨m ch√≠nh x√°c
        return orderCode; // Simplified - c·∫ßn implement logic t√¨m ki·∫øm th·ª±c t·∫ø
      }
      return null;
    } catch (error) {
      console.error('Error extracting order ID:', error);
      return null;
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch t·ª´ Sepay API
   * (C·∫ßn API key ƒë·ªÉ s·ª≠ d·ª•ng)
   */
  static async checkTransactionStatus(transactionId: string): Promise<{
    success: boolean;
    status?: 'pending' | 'completed' | 'failed';
    data?: any;
  }> {
    try {
      const apiKey = import.meta.env.VITE_SEPAY_API_KEY;
      if (!apiKey) {
        console.warn('Sepay API key not configured');
        return { success: false };
      }

      // G·ªçi API Sepay ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
      // Endpoint n√†y c·∫ßn ƒë∆∞·ª£c implement theo t√†i li·ªáu Sepay
      const response = await fetch(`https://my.sepay.vn/userapi/transactions/${transactionId}`, {
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        return {
          success: true,
          status: 'completed',
          data
        };
      }

      return { success: false };
    } catch (error) {
      console.error('Error checking Sepay transaction status:', error);
      return { success: false };
    }
  }
}

// C·∫•u h√¨nh Sepay t·ª´ environment variables
const SEPAY_CONFIG = {
  apiKey: import.meta.env.VITE_SEPAY_API_KEY || 'HWE79ZYSVNXT8VOKWDKDBHN3TWEFMQ2FPHAL5XJJTG16XEUR4ZEBPIJ0CXHAIY1Z',
  accountNumber: import.meta.env.VITE_SEPAY_ACCOUNT_NUMBER || '0123456789',
  bankCode: import.meta.env.VITE_SEPAY_BANK_CODE || 'VCB',
  accountName: import.meta.env.VITE_SEPAY_ACCOUNT_NAME || 'CONG TY TNHH RAN DINE EASY',
  webhookUrl: import.meta.env.VITE_SEPAY_WEBHOOK_URL || 'https://your-project-id.supabase.co/functions/v1/sepay-webhook'
};

// Export constants for use in other files
export { SEPAY_CONFIG };
export const SEPAY_CONSTANTS = {
  QR_SERVICE_URL: 'https://qr.sepay.vn',
  API_BASE_URL: 'https://my.sepay.vn/userapi',
  WEBHOOK_EVENTS: {
    TRANSACTION_IN: 'transaction.in',
    TRANSACTION_OUT: 'transaction.out'
  }
};