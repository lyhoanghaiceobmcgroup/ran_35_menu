import { TelegramNotificationService } from './telegramNotificationService';
import { OrderService } from './orderService';

interface BankWebhookData {
  transactionId: string;
  gateway: string; // T√™n ng√¢n h√†ng ho·∫∑c gateway
  transactionDate: string;
  accountNumber: string;
  amount: number;
  content: string;
  transferType: 'in' | 'out';
  referenceCode?: string;
  bankName?: string;
  accumulated?: number; // S·ªë d∆∞ sau giao d·ªãch
}

interface TransactionSummary {
  date: string;
  totalIncome: number;
  totalExpense: number;
  transactionCount: number;
  transactions: BankWebhookData[];
}

export class BankWebhookService {
  private static dailyTransactions: Map<string, BankWebhookData[]> = new Map();
  private static suspiciousThreshold = 10000000; // 10 tri·ªáu VND

  /**
   * X·ª≠ l√Ω webhook t·ª´ b·∫•t k·ª≥ ng√¢n h√†ng n√†o
   */
  static async handleBankWebhook(webhookData: BankWebhookData): Promise<{
    success: boolean;
    message: string;
    orderId?: string;
  }> {
    try {
      console.log('üè¶ Processing bank webhook:', webhookData);

      // L∆∞u giao d·ªãch v√†o b·ªô nh·ªõ t·∫°m ƒë·ªÉ t√≠nh to√°n cu·ªëi ng√†y
      this.storeDailyTransaction(webhookData);

      // Ki·ªÉm tra giao d·ªãch b·∫•t th∆∞·ªùng
      if (this.isSuspiciousTransaction(webhookData)) {
        await TelegramNotificationService.sendSuspiciousTransactionAlert({
          transactionId: webhookData.transactionId,
          accountNumber: webhookData.accountNumber,
          amount: webhookData.amount,
          content: webhookData.content,
          transactionDate: webhookData.transactionDate,
          bankName: webhookData.bankName || webhookData.gateway,
          transferType: webhookData.transferType
        });
      }

      // Ch·ªâ x·ª≠ l√Ω giao d·ªãch ti·ªÅn v√†o
      if (webhookData.transferType !== 'in') {
        // V·∫´n g·ª≠i th√¥ng b√°o cho giao d·ªãch ti·ªÅn ra
        await TelegramNotificationService.sendBalanceNotification({
          transactionId: webhookData.transactionId,
          accountNumber: webhookData.accountNumber,
          amount: webhookData.amount,
          content: webhookData.content,
          transactionDate: webhookData.transactionDate,
          bankName: webhookData.bankName || webhookData.gateway,
          transferType: webhookData.transferType
        });
        
        return {
          success: true,
          message: 'Outgoing transaction processed'
        };
      }

      // Tr√≠ch xu·∫•t m√£ ƒë∆°n h√†ng t·ª´ n·ªôi dung
      const orderId = TelegramNotificationService.extractOrderIdFromContent(webhookData.content);
      
      if (orderId) {
        // X·ª≠ l√Ω thanh to√°n ƒë∆°n h√†ng
        const order = await OrderService.getOrderById(orderId);
        if (order && order.status === 'pending') {
          // Ki·ªÉm tra s·ªë ti·ªÅn kh·ªõp (cho ph√©p sai l·ªách 1 VND)
          const amountDiff = Math.abs(webhookData.amount - order.total_amount);
          if (amountDiff <= 1) {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            const updateResult = await OrderService.updateOrderStatus(orderId, 'confirmed', {
              payment_method: 'BANK_TRANSFER',
              payment_amount: webhookData.amount,
              payment_reference: webhookData.referenceCode || webhookData.transactionId,
              payment_gateway: webhookData.gateway,
              bank_transaction_id: webhookData.transactionId
            });

            if (updateResult.success) {
              // G·ª≠i th√¥ng b√°o bi·∫øn ƒë·ªông s·ªë d∆∞ v·ªõi th√¥ng tin ƒë∆°n h√†ng
              await TelegramNotificationService.sendBalanceNotification({
                transactionId: webhookData.transactionId,
                accountNumber: webhookData.accountNumber,
                amount: webhookData.amount,
                content: webhookData.content,
                transactionDate: webhookData.transactionDate,
                bankName: webhookData.bankName || webhookData.gateway,
                transferType: webhookData.transferType,
                orderId: orderId
              });

              console.log(`‚úÖ Order ${orderId} payment confirmed via bank webhook`);
              return {
                success: true,
                message: `Order ${orderId} payment confirmed`,
                orderId
              };
            } else {
              console.error(`‚ùå Failed to update order ${orderId}:`, updateResult.message);
            }
          } else {
            console.warn(`‚ö†Ô∏è Amount mismatch for order ${orderId}: Expected ${order.total_amount}, got ${webhookData.amount}`);
            // G·ª≠i c·∫£nh b√°o v·ªÅ sai l·ªách s·ªë ti·ªÅn
            await TelegramNotificationService.sendSuspiciousTransactionAlert({
              transactionId: webhookData.transactionId,
              accountNumber: webhookData.accountNumber,
              amount: webhookData.amount,
              content: `${webhookData.content} - AMOUNT MISMATCH: Expected ${order.total_amount}`,
              transactionDate: webhookData.transactionDate,
              bankName: webhookData.bankName || webhookData.gateway,
              transferType: webhookData.transferType
            });
          }
        }
      }

      // G·ª≠i th√¥ng b√°o bi·∫øn ƒë·ªông s·ªë d∆∞ th√¥ng th∆∞·ªùng
      await TelegramNotificationService.sendBalanceNotification({
        transactionId: webhookData.transactionId,
        accountNumber: webhookData.accountNumber,
        amount: webhookData.amount,
        content: webhookData.content,
        transactionDate: webhookData.transactionDate,
        bankName: webhookData.bankName || webhookData.gateway,
        transferType: webhookData.transferType,
        orderId: orderId || undefined
      });

      return {
        success: true,
        message: 'Transaction processed successfully'
      };
    } catch (error) {
      console.error('‚ùå Error processing bank webhook:', error);
      return {
        success: false,
        message: 'Internal server error'
      };
    }
  }

  /**
   * L∆∞u giao d·ªãch v√†o b·ªô nh·ªõ t·∫°m theo ng√†y
   */
  private static storeDailyTransaction(transaction: BankWebhookData): void {
    const date = new Date(transaction.transactionDate).toISOString().split('T')[0];
    
    if (!this.dailyTransactions.has(date)) {
      this.dailyTransactions.set(date, []);
    }
    
    this.dailyTransactions.get(date)!.push(transaction);
  }

  /**
   * Ki·ªÉm tra giao d·ªãch b·∫•t th∆∞·ªùng
   */
  private static isSuspiciousTransaction(transaction: BankWebhookData): boolean {
    // Giao d·ªãch c√≥ s·ªë ti·ªÅn l·ªõn
    if (transaction.amount > this.suspiciousThreshold) {
      return true;
    }

    // Giao d·ªãch v√†o ban ƒë√™m (22h - 6h)
    const hour = new Date(transaction.transactionDate).getHours();
    if (hour >= 22 || hour <= 6) {
      return true;
    }

    // N·ªôi dung giao d·ªãch ch·ª©a t·ª´ kh√≥a nghi ng·ªù
    const suspiciousKeywords = ['hack', 'fraud', 'scam', 'test', 'fake'];
    const content = transaction.content.toLowerCase();
    if (suspiciousKeywords.some(keyword => content.includes(keyword))) {
      return true;
    }

    return false;
  }

  /**
   * T√≠nh to√°n v√† g·ª≠i b√°o c√°o cu·ªëi ng√†y
   */
  static async sendDailySummary(date?: string): Promise<void> {
    try {
      const targetDate = date || new Date().toISOString().split('T')[0];
      const transactions = this.dailyTransactions.get(targetDate) || [];

      if (transactions.length === 0) {
        console.log(`üìä No transactions found for ${targetDate}`);
        return;
      }

      const summary = this.calculateDailySummary(transactions, targetDate);
      await TelegramNotificationService.sendDailySummary(summary);

      // X√≥a d·ªØ li·ªáu c≈© ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ
      this.dailyTransactions.delete(targetDate);
      
      console.log(`üìä Daily summary sent for ${targetDate}`);
    } catch (error) {
      console.error('‚ùå Error sending daily summary:', error);
    }
  }

  /**
   * T√≠nh to√°n t·ªïng h·ª£p giao d·ªãch trong ng√†y
   */
  private static calculateDailySummary(transactions: BankWebhookData[], date: string): TransactionSummary {
    let totalIncome = 0;
    let totalExpense = 0;

    transactions.forEach(transaction => {
      if (transaction.transferType === 'in') {
        totalIncome += transaction.amount;
      } else {
        totalExpense += transaction.amount;
      }
    });

    return {
      date,
      totalIncome,
      totalExpense,
      transactionCount: transactions.length,
      transactions
    };
  }

  /**
   * Thi·∫øt l·∫≠p ng∆∞·ª°ng c·∫£nh b√°o giao d·ªãch b·∫•t th∆∞·ªùng
   */
  static setSuspiciousThreshold(amount: number): void {
    this.suspiciousThreshold = amount;
    console.log(`üîß Suspicious transaction threshold set to: ${amount.toLocaleString('vi-VN')} VND`);
  }

  /**
   * L·∫•y th·ªëng k√™ giao d·ªãch theo ng√†y
   */
  static getDailyStats(date?: string): TransactionSummary | null {
    const targetDate = date || new Date().toISOString().split('T')[0];
    const transactions = this.dailyTransactions.get(targetDate);
    
    if (!transactions) {
      return null;
    }

    return this.calculateDailySummary(transactions, targetDate);
  }

  /**
   * X√≥a d·ªØ li·ªáu giao d·ªãch c≈© (ch·∫°y ƒë·ªãnh k·ª≥ ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ)
   */
  static cleanupOldTransactions(daysToKeep: number = 7): void {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
    const cutoffDateStr = cutoffDate.toISOString().split('T')[0];

    for (const [date] of this.dailyTransactions) {
      if (date < cutoffDateStr) {
        this.dailyTransactions.delete(date);
        console.log(`üóëÔ∏è Cleaned up transactions for ${date}`);
      }
    }
  }
}

// T·ª± ƒë·ªông g·ª≠i b√°o c√°o cu·ªëi ng√†y v√†o 23:59
if (typeof window === 'undefined') { // Ch·ªâ ch·∫°y tr√™n server
  const scheduleDaily = () => {
    const now = new Date();
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);
    
    const msUntilMidnight = tomorrow.getTime() - now.getTime();
    
    setTimeout(() => {
      BankWebhookService.sendDailySummary();
      BankWebhookService.cleanupOldTransactions();
      
      // L·∫∑p l·∫°i m·ªói 24 gi·ªù
      setInterval(() => {
        BankWebhookService.sendDailySummary();
        BankWebhookService.cleanupOldTransactions();
      }, 24 * 60 * 60 * 1000);
    }, msUntilMidnight);
  };
  
  scheduleDaily();
}