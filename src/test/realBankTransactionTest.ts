/**
 * Test th·ª±c t·∫ø v·ªõi d·ªØ li·ªáu giao d·ªãch ng√¢n h√†ng
 * M√¥ ph·ªèng webhook t·ª´ ng√¢n h√†ng g·ª≠i v·ªÅ
 */

// Mock localStorage cho Node.js environment
if (typeof localStorage === 'undefined') {
  global.localStorage = {
    getItem: () => null,
    setItem: () => {},
    removeItem: () => {},
    clear: () => {},
    length: 0,
    key: () => null
  } as Storage;
}

// Mock fetch n·∫øu c·∫ßn
if (typeof fetch === 'undefined') {
  global.fetch = require('node-fetch');
}

import { TelegramNotificationService } from '../utils/telegramNotificationService';
import { BankWebhookService } from '../utils/bankWebhookService';
import type { BankTransactionData, BankWebhookData } from '../utils/bankWebhookService';

/**
 * Test v·ªõi d·ªØ li·ªáu giao d·ªãch th·ª±c t·∫ø
 */
class RealBankTransactionTest {
  /**
   * Test giao d·ªãch thanh to√°n ƒë∆°n h√†ng
   */
  static async testOrderPayment(): Promise<void> {
    console.log('\nüçú Testing order payment transaction...');
    
    const transactionData: BankTransactionData = {
      transactionId: 'VCB_' + Date.now(),
      amount: 285000,
      content: 'NGUYEN VAN MINH chuyen tien DH001 thanh toan pho bo tai chin',
      transactionDate: new Date().toISOString(),
      bankName: 'Vietcombank',
      accountNumber: '9090190899999',
      type: 'money_in'
    };

    await TelegramNotificationService.sendBalanceNotification(transactionData);
    console.log('‚úÖ Order payment notification sent!');
  }

  /**
   * Test giao d·ªãch r√∫t ti·ªÅn ATM
   */
  static async testATMWithdrawal(): Promise<void> {
    console.log('\nüèß Testing ATM withdrawal...');
    
    const transactionData: BankTransactionData = {
      transactionId: 'ATM_' + Date.now(),
      amount: 500000,
      content: 'Rut tien ATM tai CN QUAN 1 - SO 123 NGUYEN HUE',
      transactionDate: new Date().toISOString(),
      bankName: 'Vietcombank',
      accountNumber: '9090190899999',
      type: 'money_out'
    };

    await TelegramNotificationService.sendBalanceNotification(transactionData);
    console.log('‚úÖ ATM withdrawal notification sent!');
  }

  /**
   * Test giao d·ªãch chuy·ªÉn kho·∫£n l·ªõn (b·∫•t th∆∞·ªùng)
   */
  static async testLargeTransfer(): Promise<void> {
    console.log('\nüí∞ Testing large transfer (suspicious)...');
    
    const transactionData: BankTransactionData = {
      transactionId: 'LARGE_' + Date.now(),
      amount: 10000000,
      content: 'TRAN THI HONG chuyen tien dau tu kinh doanh',
      transactionDate: new Date().toISOString(),
      bankName: 'Vietcombank',
      accountNumber: '9090190899999',
      type: 'money_in'
    };

    await TelegramNotificationService.sendSuspiciousTransactionAlert(transactionData);
    console.log('‚úÖ Large transfer alert sent!');
  }

  /**
   * Test nhi·ªÅu ƒë∆°n h√†ng trong ng√†y
   */
  static async testMultipleOrders(): Promise<void> {
    console.log('\nüçΩÔ∏è Testing multiple orders...');
    
    const orders = [
      {
        orderId: 'DH002',
        amount: 150000,
        customer: 'LE VAN HUNG',
        dish: 'bun bo hue'
      },
      {
        orderId: 'DH003', 
        amount: 320000,
        customer: 'PHAM THI LAN',
        dish: 'com tam suon nuong'
      },
      {
        orderId: 'DH004',
        amount: 95000,
        customer: 'HOANG VAN NAM',
        dish: 'banh mi thit nuong'
      }
    ];

    for (const order of orders) {
      const transactionData: BankTransactionData = {
        transactionId: `ORDER_${order.orderId}_${Date.now()}`,
        amount: order.amount,
        content: `${order.customer} chuyen tien ${order.orderId} thanh toan ${order.dish}`,
        transactionDate: new Date().toISOString(),
        bankName: 'Vietcombank',
        accountNumber: '9090190899999',
        type: 'money_in'
      };

      await TelegramNotificationService.sendBalanceNotification(transactionData);
      console.log(`‚úÖ Order ${order.orderId} notification sent!`);
      
      // Delay ƒë·ªÉ tr√°nh spam
      await this.delay(1500);
    }
  }

  /**
   * Test webhook service v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø
   */
  static async testWebhookService(): Promise<void> {
    console.log('\nüîó Testing webhook service with real data...');
    
    const webhookData: BankWebhookData = {
      transactionId: 'WEBHOOK_' + Date.now(),
      amount: 275000,
      content: 'DOAN VAN QUANG chuyen tien DH005 thanh toan lau thai',
      transactionDate: new Date().toISOString(),
      bankName: 'Techcombank',
      accountNumber: '9090190899999',
      type: 'money_in',
      webhookSource: 'bank_api'
    };

    const webhookService = new BankWebhookService();
    await webhookService.processWebhook(webhookData);
    console.log('‚úÖ Webhook processing completed!');
  }

  /**
   * Test b√°o c√°o cu·ªëi ng√†y v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø
   */
  static async testRealDailySummary(): Promise<void> {
    console.log('\nüìä Testing real daily summary...');
    
    // T√≠nh to√°n d·ª±a tr√™n c√°c giao d·ªãch ƒë√£ test
    const summaryData = {
      totalIncome: 1125000, // T·ªïng c√°c ƒë∆°n h√†ng
      totalExpense: 500000,  // R√∫t ATM
      transactionCount: 6,   // T·ªïng s·ªë giao d·ªãch
      date: new Date().toLocaleDateString('vi-VN')
    };

    await TelegramNotificationService.sendDailySummary(summaryData);
    console.log('‚úÖ Daily summary sent!');
  }

  /**
   * Delay function
   */
  static delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

/**
 * Ch·∫°y t·∫•t c·∫£ test th·ª±c t·∫ø
 */
async function runRealBankTests() {
  console.log('üè¶ B·∫Øt ƒë·∫ßu test giao d·ªãch ng√¢n h√†ng th·ª±c t·∫ø...');
  console.log('=' .repeat(60));
  
  try {
    // Test t·ª´ng lo·∫°i giao d·ªãch
    await RealBankTransactionTest.testOrderPayment();
    await RealBankTransactionTest.delay(2000);
    
    await RealBankTransactionTest.testATMWithdrawal();
    await RealBankTransactionTest.delay(2000);
    
    await RealBankTransactionTest.testLargeTransfer();
    await RealBankTransactionTest.delay(2000);
    
    // Test nhi·ªÅu ƒë∆°n h√†ng
    await RealBankTransactionTest.testMultipleOrders();
    await RealBankTransactionTest.delay(2000);
    
    // Test webhook service
    await RealBankTransactionTest.testWebhookService();
    await RealBankTransactionTest.delay(2000);
    
    // Test b√°o c√°o cu·ªëi ng√†y
    await RealBankTransactionTest.testRealDailySummary();
    
    console.log('\n' + '=' .repeat(60));
    console.log('üéâ Ho√†n th√†nh t·∫•t c·∫£ test giao d·ªãch th·ª±c t·∫ø!');
    console.log('\nüì± Ki·ªÉm tra Telegram group ƒë·ªÉ xem c√°c th√¥ng b√°o:');
    console.log('- Th√¥ng b√°o thanh to√°n ƒë∆°n h√†ng');
    console.log('- Th√¥ng b√°o r√∫t ti·ªÅn ATM');
    console.log('- C·∫£nh b√°o giao d·ªãch l·ªõn');
    console.log('- B√°o c√°o t·ªïng h·ª£p cu·ªëi ng√†y');
    
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error);
  }
}

// Ch·∫°y test
runRealBankTests().catch(console.error);

export { RealBankTransactionTest, runRealBankTests };