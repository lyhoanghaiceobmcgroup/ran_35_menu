// C·∫•u h√¨nh c√°c format th√¥ng b√°o Telegram

export interface NotificationTemplate {
  title: string;
  icon: string;
  fields: Array<{
    label: string;
    key: string;
    format?: 'currency' | 'datetime' | 'text' | 'phone';
    required?: boolean;
  }>;
  footer?: string;
  buttons?: Array<{
    text: string;
    callbackData: string;
    condition?: (data: any) => boolean;
  }>;
}

export const NOTIFICATION_TEMPLATES = {
  // Th√¥ng b√°o ti·ªÅn v√†o
  MONEY_IN: {
    title: 'TI·ªÄN V√ÄO',
    icon: 'üí∞',
    fields: [
      { label: 'Ng√¢n h√†ng', key: 'bankName', format: 'text', required: true },
      { label: 'S·ªë t√†i kho·∫£n', key: 'accountNumber', format: 'text', required: true },
      { label: 'S·ªë ti·ªÅn', key: 'amount', format: 'currency', required: true },
      { label: 'N·ªôi dung', key: 'content', format: 'text', required: true },
      { label: 'M√£ giao d·ªãch', key: 'transactionId', format: 'text', required: true },
      { label: 'Th·ªùi gian', key: 'transactionDate', format: 'datetime', required: true }
    ],
    footer: 'üìà Giao d·ªãch nh·∫≠n ti·ªÅn th√†nh c√¥ng!',
    buttons: [
      {
        text: 'üç≥ B·∫Øt ƒë·∫ßu ch·∫ø bi·∫øn',
        callbackData: 'start_cooking_{orderId}',
        condition: (data) => !!data.orderId
      },
      {
        text: 'üìã Xem chi ti·∫øt ƒë∆°n h√†ng',
        callbackData: 'view_details_{orderId}',
        condition: (data) => !!data.orderId
      }
    ]
  } as NotificationTemplate,

  // Th√¥ng b√°o ti·ªÅn ra
  MONEY_OUT: {
    title: 'TI·ªÄN RA',
    icon: 'üí∏',
    fields: [
      { label: 'Ng√¢n h√†ng', key: 'bankName', format: 'text', required: true },
      { label: 'S·ªë t√†i kho·∫£n', key: 'accountNumber', format: 'text', required: true },
      { label: 'S·ªë ti·ªÅn', key: 'amount', format: 'currency', required: true },
      { label: 'N·ªôi dung', key: 'content', format: 'text', required: true },
      { label: 'M√£ giao d·ªãch', key: 'transactionId', format: 'text', required: true },
      { label: 'Th·ªùi gian', key: 'transactionDate', format: 'datetime', required: true }
    ],
    footer: 'üìâ Giao d·ªãch chuy·ªÉn ti·ªÅn th√†nh c√¥ng!'
  } as NotificationTemplate,

  // Th√¥ng b√°o thanh to√°n ƒë∆°n h√†ng
  ORDER_PAYMENT: {
    title: 'THANH TO√ÅN ƒê∆†N H√ÄNG',
    icon: '‚úÖ',
    fields: [
      { label: 'M√£ ƒë∆°n h√†ng', key: 'orderId', format: 'text', required: true },
      { label: 'B√†n s·ªë', key: 'tableCode', format: 'text', required: true },
      { label: 'S·ªë ƒëi·ªán tho·∫°i', key: 'customerPhone', format: 'phone', required: true },
      { label: 'S·ªë ti·ªÅn', key: 'amount', format: 'currency', required: true },
      { label: 'Ph∆∞∆°ng th·ª©c', key: 'paymentMethod', format: 'text', required: true },
      { label: 'Th·ªùi gian', key: 'timestamp', format: 'datetime', required: true }
    ],
    footer: 'üéâ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng!',
    buttons: [
      {
        text: 'üç≥ B·∫Øt ƒë·∫ßu ch·∫ø bi·∫øn',
        callbackData: 'start_cooking_{orderId}'
      },
      {
        text: 'üìã Xem chi ti·∫øt',
        callbackData: 'view_details_{orderId}'
      }
    ]
  } as NotificationTemplate,

  // C·∫£nh b√°o giao d·ªãch b·∫•t th∆∞·ªùng
  SUSPICIOUS_TRANSACTION: {
    title: 'C·∫¢NH B√ÅO GIAO D·ªäCH B·∫§T TH∆Ø·ªúNG',
    icon: 'üö®',
    fields: [
      { label: 'Ng√¢n h√†ng', key: 'bankName', format: 'text', required: true },
      { label: 'S·ªë ti·ªÅn', key: 'amount', format: 'currency', required: true },
      { label: 'N·ªôi dung', key: 'content', format: 'text', required: true },
      { label: 'M√£ giao d·ªãch', key: 'transactionId', format: 'text', required: true },
      { label: 'Th·ªùi gian', key: 'transactionDate', format: 'datetime', required: true }
    ],
    footer: '‚ö†Ô∏è Vui l√≤ng ki·ªÉm tra v√† x√°c nh·∫≠n giao d·ªãch n√†y!',
    buttons: [
      {
        text: '‚úÖ X√°c nh·∫≠n h·ª£p l·ªá',
        callbackData: 'confirm_transaction_{transactionId}'
      },
      {
        text: '‚ùå B√°o c√°o b·∫•t th∆∞·ªùng',
        callbackData: 'report_suspicious_{transactionId}'
      }
    ]
  } as NotificationTemplate,

  // B√°o c√°o cu·ªëi ng√†y
  DAILY_SUMMARY: {
    title: 'B√ÅO C√ÅO CU·ªêI NG√ÄY',
    icon: 'üìä',
    fields: [
      { label: 'Ng√†y', key: 'date', format: 'text', required: true },
      { label: 'T·ªïng thu', key: 'totalIncome', format: 'currency', required: true },
      { label: 'T·ªïng chi', key: 'totalExpense', format: 'currency', required: true },
      { label: 'L√£i/L·ªó', key: 'netAmount', format: 'currency', required: true },
      { label: 'S·ªë giao d·ªãch', key: 'transactionCount', format: 'text', required: true }
    ],
    footer: 'üìà B√°o c√°o t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng ng√¢n h√†ng'
  } as NotificationTemplate,

  // Th√¥ng b√°o s·ªë d∆∞ th·∫•p
  LOW_BALANCE: {
    title: 'C·∫¢NH B√ÅO S·ªê D∆Ø TH·∫§P',
    icon: '‚ö†Ô∏è',
    fields: [
      { label: 'Ng√¢n h√†ng', key: 'bankName', format: 'text', required: true },
      { label: 'S·ªë t√†i kho·∫£n', key: 'accountNumber', format: 'text', required: true },
      { label: 'S·ªë d∆∞ hi·ªán t·∫°i', key: 'currentBalance', format: 'currency', required: true },
      { label: 'Ng∆∞·ª°ng c·∫£nh b√°o', key: 'threshold', format: 'currency', required: true },
      { label: 'Th·ªùi gian ki·ªÉm tra', key: 'checkTime', format: 'datetime', required: true }
    ],
    footer: 'üí° Vui l√≤ng n·∫°p th√™m ti·ªÅn v√†o t√†i kho·∫£n!'
  } as NotificationTemplate
};

export const NOTIFICATION_SETTINGS = {
  // C√†i ƒë·∫∑t chung
  DEFAULT_PARSE_MODE: 'HTML' as const,
  MAX_MESSAGE_LENGTH: 4096,
  
  // C√†i ƒë·∫∑t format
  CURRENCY_FORMAT: {
    style: 'currency' as const,
    currency: 'VND',
    locale: 'vi-VN'
  },
  
  DATETIME_FORMAT: {
    locale: 'vi-VN',
    options: {
      year: 'numeric' as const,
      month: '2-digit' as const,
      day: '2-digit' as const,
      hour: '2-digit' as const,
      minute: '2-digit' as const,
      second: '2-digit' as const
    }
  },
  
  // C√†i ƒë·∫∑t ng∆∞·ª°ng c·∫£nh b√°o
  THRESHOLDS: {
    SUSPICIOUS_AMOUNT: 10000000, // 10 tri·ªáu VND
    LOW_BALANCE: 1000000, // 1 tri·ªáu VND
    HIGH_FREQUENCY_TRANSACTIONS: 10 // 10 giao d·ªãch/gi·ªù
  },
  
  // C√†i ƒë·∫∑t th·ªùi gian
  SUSPICIOUS_HOURS: {
    START: 22, // 22h
    END: 6     // 6h
  },
  
  // T·ª´ kh√≥a nghi ng·ªù
  SUSPICIOUS_KEYWORDS: [
    'hack', 'fraud', 'scam', 'test', 'fake', 
    'phishing', 'spam', 'virus', 'malware',
    'l·ª´a ƒë·∫£o', 'gi·∫£ m·∫°o', 'hack', 'test'
  ],
  
  // Emoji cho c√°c tr·∫°ng th√°i
  EMOJIS: {
    SUCCESS: '‚úÖ',
    WARNING: '‚ö†Ô∏è',
    ERROR: '‚ùå',
    INFO: '‚ÑπÔ∏è',
    MONEY_IN: 'üí∞',
    MONEY_OUT: 'üí∏',
    BANK: 'üè¶',
    CARD: 'üí≥',
    PHONE: 'üìû',
    TIME: '‚è∞',
    CHART_UP: 'üìà',
    CHART_DOWN: 'üìâ',
    REPORT: 'üìä',
    COOKING: 'üç≥',
    DETAILS: 'üìã',
    ALERT: 'üö®'
  }
};

// Helper functions ƒë·ªÉ format d·ªØ li·ªáu
export class NotificationFormatter {
  static formatCurrency(amount: number): string {
    return new Intl.NumberFormat(
      NOTIFICATION_SETTINGS.CURRENCY_FORMAT.locale,
      NOTIFICATION_SETTINGS.CURRENCY_FORMAT
    ).format(amount);
  }
  
  static formatDateTime(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleString(
      NOTIFICATION_SETTINGS.DATETIME_FORMAT.locale,
      NOTIFICATION_SETTINGS.DATETIME_FORMAT.options
    );
  }
  
  static formatPhone(phone: string): string {
    // Format s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam
    const cleaned = phone.replace(/\D/g, '');
    if (cleaned.length === 10) {
      return cleaned.replace(/(\d{4})(\d{3})(\d{3})/, '$1 $2 $3');
    }
    return phone;
  }
  
  static formatText(text: string): string {
    // Escape HTML characters
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }
  
  static truncateMessage(message: string): string {
    if (message.length <= NOTIFICATION_SETTINGS.MAX_MESSAGE_LENGTH) {
      return message;
    }
    
    const truncated = message.substring(0, NOTIFICATION_SETTINGS.MAX_MESSAGE_LENGTH - 3);
    return truncated + '...';
  }
  
  static replaceVariables(template: string, data: Record<string, any>): string {
    return template.replace(/\{(\w+)\}/g, (match, key) => {
      return data[key] || match;
    });
  }
}