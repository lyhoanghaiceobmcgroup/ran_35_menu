const BOT_TOKEN = '7227042614:AAGeG3EZqSFVysFA-UU8mCw6o76UJrbCtJE';

// Thay YOUR_NGROK_URL b·∫±ng URL t·ª´ ngrok (v√≠ d·ª•: https://abc123.ngrok.io)
const WEBHOOK_URL = 'https://YOUR_NGROK_URL.ngrok.io/webhook/telegram';

async function setupWebhook() {
  console.log('üîó ƒêang setup webhook...');
  console.log('üìç URL:', WEBHOOK_URL);
  console.log('');
  
  // Ki·ªÉm tra URL c√≥ ƒë∆∞·ª£c thay ƒë·ªïi ch∆∞a
  if (WEBHOOK_URL.includes('YOUR_NGROK_URL')) {
    console.log('‚ùå L·ªói: B·∫°n ch∆∞a thay ƒë·ªïi YOUR_NGROK_URL!');
    console.log('üìù H∆∞·ªõng d·∫´n:');
    console.log('   1. Ch·∫°y ngrok: ngrok http 3001');
    console.log('   2. Copy URL t·ª´ ngrok (vd: https://abc123.ngrok.io)');
    console.log('   3. Thay YOUR_NGROK_URL trong file n√†y b·∫±ng URL ƒë√≥');
    console.log('   4. Ch·∫°y l·∫°i: node setup-webhook-manual.js');
    return;
  }
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ url: WEBHOOK_URL })
    });
    
    const result = await response.json();
    
    console.log('üì° Telegram API Response:');
    console.log(JSON.stringify(result, null, 2));
    console.log('');
    
    if (result.ok) {
      console.log('üéâ WEBHOOK SETUP TH√ÄNH C√îNG!');
      console.log('üìç Webhook URL:', WEBHOOK_URL);
      console.log('');
      console.log('üìã B∆∞·ªõc ti·∫øp theo:');
      console.log('   1. ƒê·∫£m b·∫£o webhook server ƒëang ch·∫°y (node auto-setup-webhook.cjs --manual)');
      console.log('   2. ƒê·∫£m b·∫£o ngrok ƒëang ch·∫°y (ngrok http 3001)');
      console.log('   3. Test b·∫±ng c√°ch ƒë·∫∑t h√†ng tr√™n website');
      console.log('   4. Ki·ªÉm tra tin nh·∫Øn trong nh√≥m Telegram');
    } else {
      console.log('‚ùå SETUP TH·∫§T B·∫†I!');
      console.log('üîß L·ªói:', result.description);
      console.log('');
      console.log('üí° C√°c nguy√™n nh√¢n c√≥ th·ªÉ:');
      console.log('   - URL ngrok kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n');
      console.log('   - Bot Token kh√¥ng ƒë√∫ng');
      console.log('   - K·∫øt n·ªëi internet kh√¥ng ·ªïn ƒë·ªãnh');
      console.log('   - Webhook server ch∆∞a ch·∫°y');
    }
  } catch (error) {
    console.error('üí• L·ªói k·∫øt n·ªëi:', error.message);
    console.log('');
    console.log('üîß Ki·ªÉm tra:');
    console.log('   - K·∫øt n·ªëi internet');
    console.log('   - URL ngrok c√≥ ƒë√∫ng format kh√¥ng');
    console.log('   - C√≥ c√†i node-fetch kh√¥ng: npm install node-fetch@2');
  }
}

// Ki·ªÉm tra v√† c√†i node-fetch n·∫øu c·∫ßn
try {
  // Th·ª≠ import fetch
  if (typeof fetch === 'undefined') {
    console.log('‚ö†Ô∏è  ƒêang c√†i node-fetch...');
    const { spawn } = require('child_process');
    const install = spawn('npm', ['install', 'node-fetch@2'], { stdio: 'inherit' });
    
    install.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ ƒê√£ c√†i node-fetch');
        // Import sau khi c√†i
        global.fetch = require('node-fetch');
        setupWebhook();
      } else {
        console.log('‚ùå Kh√¥ng th·ªÉ c√†i node-fetch');
        console.log('üîß Ch·∫°y th·ªß c√¥ng: npm install node-fetch@2');
      }
    });
  } else {
    setupWebhook();
  }
} catch (error) {
  // Fallback: th·ª≠ require node-fetch
  try {
    global.fetch = require('node-fetch');
    setupWebhook();
  } catch (fetchError) {
    console.log('‚ùå C·∫ßn c√†i node-fetch:');
    console.log('npm install node-fetch@2');
    console.log('');
    console.log('Sau ƒë√≥ ch·∫°y l·∫°i: node setup-webhook-manual.js');
  }
}